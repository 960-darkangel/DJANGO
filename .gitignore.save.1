# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
# Entornos virtuales
env/
venv/
ENV/
*.pyc
__pycache__/
*.pyo
*.pyd
*.sqlite3

# Archivos de configuración locales
*.env
*.log
*.pot
*.py[cod]
*~ 
.DS_Store
.idea/
.vscode/

# Archivos de Django
db.sqlite3
/media/
staticfiles/

# Archivos de migraciones que no quieras subir (opcional, aunque muchos sí los suben)
*/migrations/__pycache__/
*/migrations/*.pyc
*/migrations/*.pyo

# Archivos de compilación / paquetes
*.egg
*.egg-info/
dist/
build/
.eggs/

# Archivos de testing/coverage
.coverage
.tox/
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/

# Archivos de Git
.gitignore.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installeIFEST

# PyInstaller
#  ually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spe
# Installer logs
pip-log.txt
pip-dlete-this-directory.txt

# Unit test / coverage reports
htmlco/
.tox/
.nox/
.covera
.coverage.*
.cache
nosetests

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lo
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml
 pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#
# pixi
#   Simir to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in thevenv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; ud by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuffcelerybeat-schedule
celerybeat.pid


# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

